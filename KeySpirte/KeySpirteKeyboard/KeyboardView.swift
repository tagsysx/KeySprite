//
//  KeyboardView.swift
//  KeySpirteKeyboard
//
//  Created by Lei Yang on 12/8/2025.
//

import UIKit
import ObjectiveC

private struct AssociatedKeys {
    static var lastBounds = "lastBounds"
}

protocol KeyboardViewDelegate: AnyObject {
    func didTapKey(_ key: KeyboardKey)
    func didLongPressKey(_ key: KeyboardKey)
    func didTapLayoutButton(_ layout: KeyboardLayout)
}

class KeyboardView: UIView {
    
    // MARK: - Properties
    weak var delegate: KeyboardViewDelegate?
    private var currentLayout: KeyboardLayout = .qwerty
    var keyViews: [[KeyboardKeyView]] = []  // Êîπ‰∏∫internalËÆøÈóÆÁ∫ßÂà´
    private var t9InputEngine: T9InputEngine?
    private var isLayoutCreated = false  // Ê∑ªÂä†Ê†áÂøóÈò≤Ê≠¢ÈáçÂ§çÂàõÂª∫Â∏ÉÂ±Ä
    
    // MARK: - UI Components
    private let stackView = UIStackView()
    private let backgroundView = UIView()
    private let titleLabel = UILabel()
    private let layoutButtonsStackView = UIStackView()
    
    // MARK: - Initialization
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupUI()
    }
    
    // MARK: - Setup
    private func setupUI() {
        print("üéπ KeyboardView setupUI called")
        
        backgroundColor = UIColor.systemBackground
        
        // ËÆæÁΩÆËÉåÊôØ
        backgroundView.backgroundColor = UIColor.systemBlue.withAlphaComponent(0.1)
        backgroundView.translatesAutoresizingMaskIntoConstraints = false
        addSubview(backgroundView)
        
        // ËÆæÁΩÆÊ†áÈ¢òÊ†áÁ≠æÔºàÈöêËóè‰ª•ËäÇÁúÅÁ©∫Èó¥Ôºâ
        titleLabel.text = "KeySprite"
        titleLabel.textAlignment = .center
        titleLabel.font = UIFont.boldSystemFont(ofSize: 16)
        titleLabel.textColor = UIColor.systemBlue
        titleLabel.backgroundColor = UIColor.systemBlue.withAlphaComponent(0.2)
        titleLabel.layer.cornerRadius = 8
        titleLabel.layer.masksToBounds = true
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.isHidden = true  // ÈöêËóèÊ†áÈ¢ò‰ª•ËäÇÁúÅÁ©∫Èó¥
        addSubview(titleLabel)
        
        
        // ËÆæÁΩÆ‰∏ªÂ†ÜÊ†àËßÜÂõæ
        stackView.axis = .vertical
        stackView.distribution = .fillEqually  // Êîπ‰∏∫fillEquallyÔºåÁ°Æ‰øùË°åÈ´òÂ∫¶‰∏ÄËá¥
        stackView.spacing = 4  // ÂáèÂ∞ëË°åÈó¥Ë∑ù‰ª•ÂéãÁº©Á©∫ÁôΩ
        stackView.translatesAutoresizingMaskIntoConstraints = false
        addSubview(stackView)
        
        // ËÆæÁΩÆÂ∏ÉÂ±ÄÊåâÈíÆ
        setupLayoutButtons()
        
        // ËÆæÁΩÆÁ∫¶ÊùüÔºå‰ΩøÁî®‰ºòÂÖàÁ∫ßÂ§ÑÁêÜÈõ∂ÂÆΩÂ∫¶ÊÉÖÂÜµ
        let stackViewLeadingConstraint = stackView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8)
        let stackViewTrailingConstraint = stackView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8)

        let layoutButtonsLeadingConstraint = layoutButtonsStackView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8)
        let layoutButtonsTrailingConstraint = layoutButtonsStackView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8)
        
        // Èôç‰ΩéÊ∞¥Âπ≥Á∫¶ÊùüÁöÑ‰ºòÂÖàÁ∫ß‰ª•ÈÅøÂÖçÈõ∂ÂÆΩÂ∫¶ÂÜ≤Á™Å
        stackViewLeadingConstraint.priority = .defaultHigh
        stackViewTrailingConstraint.priority = .defaultHigh

        layoutButtonsLeadingConstraint.priority = .defaultHigh
        layoutButtonsTrailingConstraint.priority = .defaultHigh
        
        // ÂàõÂª∫Á∫¶ÊùüÂπ∂ËÆæÁΩÆ‰ºòÂÖàÁ∫ß
        let titleLabelHeightConstraint = titleLabel.heightAnchor.constraint(equalToConstant: 30)

        let layoutButtonsHeightConstraint = layoutButtonsStackView.heightAnchor.constraint(equalToConstant: 40)
        let layoutButtonsBottomConstraint = layoutButtonsStackView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -4)  // ÂáèÂ∞ëÂ∫ïÈÉ®Èó¥Ë∑ù
        
        // ËÆæÁΩÆÂêàÁêÜÁöÑÁ∫¶Êùü‰ºòÂÖàÁ∫ß - Ëøô‰∫õÊòØÂøÖÈúÄÁöÑÈ´òÂ∫¶
        titleLabelHeightConstraint.priority = .required

        layoutButtonsHeightConstraint.priority = .required
        layoutButtonsBottomConstraint.priority = .required
        
        // ÂàõÂª∫stackViewÁ∫¶Êùü
        let stackViewBottomConstraint = stackView.bottomAnchor.constraint(lessThanOrEqualTo: layoutButtonsStackView.topAnchor, constant: -2)  // Ëøõ‰∏ÄÊ≠•ÂáèÂ∞ëÈó¥Ë∑ù
        stackViewBottomConstraint.priority = .defaultHigh
        
        // ‰∏∫stackViewËÆæÁΩÆÂêàÁêÜÁöÑÊúÄÂ∞èÈ´òÂ∫¶
        let stackViewMinHeightConstraint = stackView.heightAnchor.constraint(greaterThanOrEqualToConstant: 160)  // 4Ë°å√ó40pt
        stackViewMinHeightConstraint.priority = .defaultHigh  // Èôç‰Ωé‰ºòÂÖàÁ∫ß
        
        NSLayoutConstraint.activate([
            backgroundView.topAnchor.constraint(equalTo: topAnchor),
            backgroundView.leadingAnchor.constraint(equalTo: leadingAnchor),
            backgroundView.trailingAnchor.constraint(equalTo: trailingAnchor),
            backgroundView.bottomAnchor.constraint(equalTo: bottomAnchor),
            
            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),
            titleLabel.centerXAnchor.constraint(equalTo: centerXAnchor),
            titleLabel.widthAnchor.constraint(equalToConstant: 100),
            titleLabelHeightConstraint,
            
            stackView.topAnchor.constraint(equalTo: topAnchor, constant: 4),  // Áõ¥Êé•‰ªéÈ°∂ÈÉ®ÂºÄÂßã
            stackViewLeadingConstraint,
            stackViewTrailingConstraint,
            
            layoutButtonsLeadingConstraint,
            layoutButtonsTrailingConstraint,
            layoutButtonsBottomConstraint,
            layoutButtonsHeightConstraint,
            
            // stackViewÁ∫¶Êùü
            stackViewBottomConstraint,
            stackViewMinHeightConstraint
        ])
        
        // Ê∑ªÂä†ÊúÄÂ∞èÂÆΩÂ∫¶Á∫¶Êùü‰Ωú‰∏∫Â§áÈÄâ
        let minWidthConstraint = stackView.widthAnchor.constraint(greaterThanOrEqualToConstant: 200)
        minWidthConstraint.priority = .defaultLow
        minWidthConstraint.isActive = true
        
        // ËÆæÁΩÆÂÜÖÂÆπÂéãÁº©ÂíåÂÜÖÂÆπÊã•Êä±‰ºòÂÖàÁ∫ß
        stackView.setContentHuggingPriority(.defaultLow, for: .vertical)
        stackView.setContentCompressionResistancePriority(.defaultHigh, for: .vertical)
        
        // ËÆæÁΩÆÈîÆÁõòËßÜÂõæÁöÑÂä®ÊÄÅÈ´òÂ∫¶Á∫¶Êùü
        let minHeightConstraint = heightAnchor.constraint(greaterThanOrEqualToConstant: 200)
        minHeightConstraint.priority = .defaultHigh  // Èôç‰Ωé‰ºòÂÖàÁ∫ß
        minHeightConstraint.isActive = true
        
        // È™åËØÅÁ∫¶ÊùüËÆæÁΩÆ
        validateConstraints()
        
        print("‚úÖ Keyboard view setup complete")
    }
    
    // MARK: - Layout Buttons Setup
    private func setupLayoutButtons() {
        layoutButtonsStackView.axis = .horizontal
        layoutButtonsStackView.distribution = .fillEqually
        layoutButtonsStackView.spacing = 3  // ÂáèÂ∞ëÂ∏ÉÂ±ÄÊåâÈíÆÈó¥Ë∑ù
        layoutButtonsStackView.translatesAutoresizingMaskIntoConstraints = false
        addSubview(layoutButtonsStackView)
        
        let layouts: [(KeyboardLayout, String)] = [
            (.qwerty, "QWERTY"),
            (.chinese, "Chinese"),  // Êîπ‰∏∫Ëã±Êñá
            (.number, "Numbers"),   // Êîπ‰∏∫Ëã±Êñá
            (.symbol, "Symbols"),   // Êîπ‰∏∫Ëã±Êñá
            (.emoji, "Emoji")       // Êîπ‰∏∫Ëã±Êñá
        ]
        
        for (index, (layout, title)) in layouts.enumerated() {
            let button = createLayoutButton(title: title, layout: layout, index: index)
            layoutButtonsStackView.addArrangedSubview(button)
        }
    }
    
    private func createLayoutButton(title: String, layout: KeyboardLayout, index: Int) -> UIButton {
        let button = UIButton(type: .system)
        button.setTitle(title, for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 12, weight: .medium)
        button.backgroundColor = layout == currentLayout ? UIColor.systemBlue : UIColor.systemGray4
        button.setTitleColor(layout == currentLayout ? UIColor.white : UIColor.systemGray, for: .normal)
        button.layer.cornerRadius = 6
        button.layer.masksToBounds = true
        button.tag = index
        
        button.addTarget(self, action: #selector(layoutButtonTapped(_:)), for: .touchUpInside)
        
        return button
    }
    
    @objc private func layoutButtonTapped(_ sender: UIButton) {
        let layouts: [KeyboardLayout] = [.qwerty, .chinese, .number, .symbol, .emoji]
        guard sender.tag < layouts.count else { return }
        
        let layout = layouts[sender.tag]
        updateLayout(layout)
        updateLayoutButtonStates()
        delegate?.didTapLayoutButton(layout)
    }
    
    private func updateLayoutButtonStates() {
        let layouts: [KeyboardLayout] = [.qwerty, .chinese, .number, .symbol, .emoji]
        
        for case let button as UIButton in layoutButtonsStackView.arrangedSubviews {
            guard button.tag < layouts.count else { continue }
            let layout = layouts[button.tag]
            let isSelected = layout == currentLayout
            
            button.backgroundColor = isSelected ? UIColor.systemBlue : UIColor.systemGray4
            button.setTitleColor(isSelected ? UIColor.white : UIColor.systemGray, for: .normal)
        }
    }
    
    // MARK: - Layout Creation
    func createKeyboardLayout() {  // Êîπ‰∏∫internalËÆøÈóÆÁ∫ßÂà´
        // Èò≤Ê≠¢ÈáçÂ§çÂàõÂª∫Â∏ÉÂ±Ä
        guard !isLayoutCreated else {
            print("‚ö†Ô∏è Keyboard layout already created, skipping...")
            return
        }
        
        // Ê£ÄÊü•ËßÜÂõæÂ∞∫ÂØ∏ÊòØÂê¶ÊúâÊïàÔºåÂÖÅËÆ∏Áà∂ËßÜÂõæÊúâÈõ∂È´òÂ∫¶‰ΩÜË¶ÅÊúâÂÆΩÂ∫¶
        guard bounds.width > 0 else {
            print("‚ö†Ô∏è Invalid bounds for layout creation (no width): \(bounds), delaying layout...")
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in
                self?.createKeyboardLayout()
            }
            return
        }
        
        // Â¶ÇÊûúÈ´òÂ∫¶‰∏∫0Ôºå‰ªçÁÑ∂Â∞ùËØïÂàõÂª∫Â∏ÉÂ±ÄÔºå‰ΩÜÂèëÂá∫Ë≠¶Âëä
        if bounds.height == 0 {
            print("‚ö†Ô∏è Warning: Parent view has zero height, layout may be compressed")
            if let superview = superview {
                print("‚ö†Ô∏è Parent view info: frame=\(superview.frame), bounds=\(superview.bounds)")
            }
        }
        
        print("üéØ Creating keyboard layout for: \(currentLayout)")
        print("üéØ Current bounds: \(bounds)")
        print("üéØ Current frame: \(frame)")
        
        // Ë∞ÉËØïÁ∫¶ÊùüÁä∂ÊÄÅ
        debugConstraintState()
        
        // Ê∏ÖÈô§Áé∞ÊúâÂ∏ÉÂ±Ä
        stackView.arrangedSubviews.forEach { $0.removeFromSuperview() }
        keyViews.removeAll()
        
        let layoutSpec = getLayoutSpec(for: currentLayout)
        print("üìê Layout spec: \(layoutSpec.rows) rows, keys per row: \(layoutSpec.keysPerRow)")
        
        // ÂàùÂßãÂåñT9ËæìÂÖ•ÂºïÊìéÔºàÂ¶ÇÊûúÊòØ‰∏≠ÊñáÂ∏ÉÂ±ÄÔºâ
        if currentLayout == .chinese {
            t9InputEngine = T9InputEngine()
        } else {
            t9InputEngine = nil
        }
        
        for rowIndex in 0..<layoutSpec.rows {
            let rowStackView = UIStackView()
            rowStackView.axis = .horizontal
            rowStackView.distribution = .fillEqually
            rowStackView.spacing = 3  // ÂáèÂ∞ëÊåâÈîÆÈó¥Ë∑ù‰ª•ÂéãÁº©Á©∫ÁôΩ
            rowStackView.translatesAutoresizingMaskIntoConstraints = false
            
            var rowKeyViews: [KeyboardKeyView] = []
            
            for keyIndex in 0..<layoutSpec.keysPerRow[rowIndex] {
                let keySpec = layoutSpec.layout[rowIndex][keyIndex]
                let keyView = createKeyView(for: keySpec, row: rowIndex, index: keyIndex)
                rowKeyViews.append(keyView)
                rowStackView.addArrangedSubview(keyView)
            }
            
            keyViews.append(rowKeyViews)
            stackView.addArrangedSubview(rowStackView)
        }
        
        // Êõ¥Êñ∞Â∏ÉÂ±ÄÊåâÈíÆÁä∂ÊÄÅ
        updateLayoutButtonStates()
        
        // Ê†áËÆ∞Â∏ÉÂ±ÄÂ∑≤ÂàõÂª∫
        isLayoutCreated = true
        
        print("‚úÖ Keyboard layout created with \(keyViews.count) rows")
        print("‚úÖ Final bounds: \(bounds)")
        print("‚úÖ Final frame: \(frame)")
    }
    
    private func createKeyView(for keySpec: String, row: Int, index: Int) -> KeyboardKeyView {
        let keyType = determineKeyType(from: keySpec)
        let key = KeyboardKey(character: keySpec, type: keyType)
        
        let keyView = KeyboardKeyView(key: key)
        keyView.delegate = self
        
        // ËÆæÁΩÆÁâπÊÆäÊåâÈîÆÁöÑÂÆΩÂ∫¶ÂíåÊ†∑Âºè
        if currentLayout == .chinese {
            // T9ÈîÆÁõòÁöÑÁâπÊÆäÂ§ÑÁêÜ - ‰∏∫Êï∞Â≠óÈîÆËÆæÁΩÆÂØπÂ∫îÁöÑÂ≠óÊØçÂ≠êÊ†áÁ≠æ
            let layoutSpec = getLayoutSpec(for: currentLayout) as! ChineseLayoutSpec
            if let letterMapping = layoutSpec.t9LetterMapping[keySpec] {
                keyView.setT9SubLabel(letterMapping)
            }
        } else {
            // ÂÖ∂‰ªñÂ∏ÉÂ±ÄÁöÑÈªòËÆ§Â§ÑÁêÜ
            if keyType == .space {
                keyView.setContentHuggingPriority(.defaultLow, for: .horizontal)
            } else if keyType == .return || keyType == .backspace {
                keyView.setContentHuggingPriority(.defaultHigh, for: .horizontal)
            }
        }
        
        return keyView
    }
    
    private func determineKeyType(from keySpec: String) -> KeyType {
        if currentLayout == .chinese {
            // T9ÈîÆÁõòÁöÑÁâπÊÆäÊåâÈîÆÁ±ªÂûã
            switch keySpec {
            case "Delete":
                return .backspace
            case "0":
                return .space
            case "Confirm":
                return .return
            case "Candidates":
                return .layout
            case "1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "#":
                return .character
            default:
                return .character
            }
        } else {
            // ÂÖ∂‰ªñÂ∏ÉÂ±ÄÁöÑÈªòËÆ§Â§ÑÁêÜ
            switch keySpec {
            case "‚å´":
                return .backspace
            case "Space":
                return .space
            case "Return", "‚Üµ":
                return .return
            case "‚áß":
                return .shift
            case "123", "ABC", "üåê", "üòÄ", "Symbols":
                return .layout
            default:
                return .character
            }
        }
    }
    
    // MARK: - Layout Update
    func updateLayout(_ layout: KeyboardLayout) {
        currentLayout = layout
        isLayoutCreated = false  // ÈáçÁΩÆÊ†áÂøóÔºåÂÖÅËÆ∏ÈáçÊñ∞ÂàõÂª∫Â∏ÉÂ±Ä
        createKeyboardLayout()
    }
    
    func resetLayout() {
        isLayoutCreated = false
        keyViews.removeAll()
        stackView.arrangedSubviews.forEach { $0.removeFromSuperview() }
    }
    
    func forceUpdate() {
        print("üîÑ Forcing KeyboardView update...")
        setNeedsLayout()
        layoutIfNeeded()
        
        // Â¶ÇÊûúÂ∏ÉÂ±ÄËøòÊ≤°ÊúâÂàõÂª∫ÔºåÂàõÂª∫ÂÆÉ
        if !isLayoutCreated && bounds.width > 0 && bounds.height > 0 {
            createKeyboardLayout()
        }
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        // Á°Æ‰øùÂú®Â∞∫ÂØ∏ÂèòÂåñÊó∂ÈáçÊñ∞ËÆ°ÁÆóÂ∏ÉÂ±ÄÔºå‰ΩÜÂè™Âú®ÂøÖË¶ÅÊó∂
        if bounds.width > 0 && bounds.height > 0 && keyViews.isEmpty && !isLayoutCreated {
            print("üîß LayoutSubviews: Creating keyboard layout due to size change")
            DispatchQueue.main.async { [weak self] in
                self?.createKeyboardLayout()
            }
        }
        
        // Ê£ÄÊü•Â∞∫ÂØ∏ÂèòÂåñ
        if let lastBounds = objc_getAssociatedObject(self, &AssociatedKeys.lastBounds) as? CGRect {
            let sizeChange = abs(bounds.width - lastBounds.width) + abs(bounds.height - lastBounds.height)
            if sizeChange > 50 {
                print("üîÑ Significant size change detected: \(sizeChange)")
                handleSignificantSizeChange()
            }
        }
        
        // ‰øùÂ≠òÂΩìÂâçbounds
        objc_setAssociatedObject(self, &AssociatedKeys.lastBounds, bounds, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
    }
    
    private func handleSignificantSizeChange() {
        print("üîÑ Handling significant size change...")
        
        // Â¶ÇÊûúÂ∞∫ÂØ∏ÂèòÂåñÂæàÂ§ßÔºåÂèØËÉΩÈúÄË¶ÅÈáçÊñ∞ÂàõÂª∫Â∏ÉÂ±Ä
        if bounds.width > 0 && bounds.height > 0 && !keyViews.isEmpty {
            print("üîÑ Recreating layout due to significant size change")
            isLayoutCreated = false
            createKeyboardLayout()
        }
    }
    
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        
        // ÂΩìÁâπÂæÅÈõÜÂêàÊîπÂèòÊó∂ÔºàÂ¶ÇÊ∑±Ëâ≤Ê®°ÂºèÂàáÊç¢ÔºâÔºåÈáçÊñ∞ÂàõÂª∫Â∏ÉÂ±Ä
        if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {
            print("üé® Color appearance changed, updating layout")
            DispatchQueue.main.async { [weak self] in
                self?.updateLayoutAppearance()
            }
        }
    }
    
    private func updateLayoutAppearance() {
        // Êõ¥Êñ∞ÊåâÈîÆÁöÑÂ§ñËßÇ‰ª•ÂåπÈÖçÊñ∞ÁöÑÁâπÂæÅÈõÜÂêà
        for rowKeyViews in keyViews {
            for keyView in rowKeyViews {
                keyView.updateAppearance()
            }
        }
    }
    
    // MARK: - Intrinsic Content Size
    override var intrinsicContentSize: CGSize {
        // Âä®ÊÄÅËÆ°ÁÆóÈîÆÁõòÊâÄÈúÄÁöÑÈ´òÂ∫¶ÔºåËÄå‰∏çÊòØÂõ∫ÂÆöÂÄº
        let topMargin: CGFloat = 4  // È°∂ÈÉ®Èó¥Ë∑ù
        let buttonRowsHeight: CGFloat = 4 * 40 + 3 * 4  // 4Ë°åÊåâÈîÆÔºåÊØèË°å40pt + 3‰∏™Èó¥Ë∑ù4pt
        let layoutButtonsHeight: CGFloat = 40 + 4  // Â∏ÉÂ±ÄÊåâÈíÆ + Èó¥Ë∑ù
        let totalHeight = topMargin + buttonRowsHeight + layoutButtonsHeight + 8  // È¢ùÂ§ñÁöÑËæπË∑ù
        
        print("üéØ Calculated intrinsic height: \(totalHeight)")
        
        let keyboardWidth: CGFloat = bounds.width > 0 ? bounds.width : UIView.noIntrinsicMetric
        return CGSize(width: keyboardWidth, height: totalHeight)
    }
    
    // MARK: - Constraint Debugging
    private func debugConstraintState() {
        print("üîç Constraint Debug State:")
        print("  - View frame: \(frame)")
        print("  - View bounds: \(bounds)")
        print("  - Intrinsic content size: \(intrinsicContentSize)")
        if let superview = superview {
            print("  - Superview frame: \(superview.frame)")
            print("  - Superview bounds: \(superview.bounds)")
        }
        print("  - StackView frame: \(stackView.frame)")
        print("  - Active constraints count: \(constraints.count)")
        
        // Ê£ÄÊü•ÊòØÂê¶ÊúâÁ∫¶ÊùüÂÜ≤Á™ÅÁöÑÂèØËÉΩÊÄß
        if bounds.width < 50 {
            print("‚ö†Ô∏è Warning: View width is very small (\(bounds.width)), may cause constraint conflicts")
        }
        if bounds.height == 0 {
            print("‚ö†Ô∏è Warning: View height is zero, requesting intrinsic content size")
            invalidateIntrinsicContentSize()
        }
    }
    
    // MARK: - Layout Specifications
    private func getLayoutSpec(for layout: KeyboardLayout) -> KeyboardLayoutSpec {
        switch layout {
        case .qwerty:
            return QWERTYLayoutSpec()
        case .chinese:
            return ChineseLayoutSpec()
        case .number:
            return NumberLayoutSpec()
        case .symbol:
            return SymbolLayoutSpec()
        case .emoji:
            return EmojiLayoutSpec()
        }
    }
    

    
    // MARK: - T9 Input Handling
    func handleT9Input(_ key: String) -> T9InputResult? {
        guard let t9Engine = t9InputEngine else { return nil }
        
        let result = t9Engine.inputKey(key)
        
        // T9ËæìÂÖ•ÁªìÊûúÂ§ÑÁêÜÔºà‰∏çÂÜçÊòæÁ§∫ÂÄôÈÄâËØçÔºâ
        switch result {
        case .input(let input):
            print("T9 Input: \(input)")
        case .candidate(let candidate):
            print("T9 Candidate: \(candidate)")
        case .confirmed(let word):
            print("T9 Confirmed: \(word)")
        case .space:
            print("T9 Space")
        case .cleared:
            print("T9 Cleared")
        case .none:
            break
        }
        
        return result
    }
    
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
        
        if superview != nil {
            print("üéπ KeyboardView added to superview")
            // ÂΩìËßÜÂõæË¢´Ê∑ªÂä†Âà∞Áà∂ËßÜÂõæÊó∂ÔºåÁ°Æ‰øùÁ∫¶ÊùüÂ∑≤ËÆæÁΩÆ
            setNeedsLayout()
            layoutIfNeeded()
        } else {
            print("üéπ KeyboardView removed from superview")
            // ÂΩìËßÜÂõæË¢´ÁßªÈô§Êó∂ÔºåÈáçÁΩÆÁä∂ÊÄÅ
            isLayoutCreated = false
            keyViews.removeAll()
        }
    }
    
    override func didMoveToWindow() {
        super.didMoveToWindow()
        
        if window != nil {
            print("üéπ KeyboardView added to window")
            print("üéπ Window bounds: \(window?.bounds ?? .zero)")
            print("üéπ View constraints: \(constraints.count)")
            // ÂΩìËßÜÂõæË¢´Ê∑ªÂä†Âà∞Á™óÂè£Êó∂ÔºåÁ°Æ‰øùÂ∏ÉÂ±ÄÊ≠£Á°Æ
            DispatchQueue.main.async { [weak self] in
                self?.setNeedsLayout()
                self?.layoutIfNeeded()
            }
        } else {
            print("üéπ KeyboardView removed from window")
            // ÂΩìËßÜÂõæË¢´ÁßªÈô§Êó∂ÔºåÈáçÁΩÆÁä∂ÊÄÅ
            isLayoutCreated = false
            keyViews.removeAll()
        }
    }
    
    private func validateConstraints() {
        print("üîç Validating KeyboardView constraints...")
        print("üéπ Constraints count: \(constraints.count)")
        print("üéπ Bounds: \(bounds)")
        print("üéπ Frame: \(frame)")
        
        // Ê£ÄÊü•ÊòØÂê¶ÊúâË∂≥Â§üÁöÑÁ∫¶Êùü
        if constraints.count < 8 {
            print("‚ö†Ô∏è Warning: KeyboardView has fewer than 8 constraints")
        }
        
        // Ê£ÄÊü•Á∫¶ÊùüÊòØÂê¶ÊúâÊïà
        for (index, constraint) in constraints.enumerated() {
            if !constraint.isActive {
                print("‚ö†Ô∏è Warning: Constraint \(index) is not active")
            }
        }
    }
    
    // MARK: - Cleanup
    
    deinit {
        print("üéπ KeyboardView deallocated")
        // Ê∏ÖÁêÜÂÖ≥ËÅîÂØπË±°
        objc_setAssociatedObject(self, &AssociatedKeys.lastBounds, nil, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
    }
}

// MARK: - KeyboardKeyViewDelegate
extension KeyboardView: KeyboardKeyViewDelegate {
    func didTapKey(_ key: KeyboardKey) {
        delegate?.didTapKey(key)
    }
    
    func didLongPressKey(_ key: KeyboardKey) {
        delegate?.didLongPressKey(key)
    }
}
